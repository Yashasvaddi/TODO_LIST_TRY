version: '3.8'

services:
  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=development
    depends_on:
      - backend
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev
    networks:
      - agri-network

  # Backend FastAPI Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      # Basic Configuration
      - ENVIRONMENT=development
      - API_HOST=0.0.0.0
      - API_PORT=8000
      
      # Mock Database URLs (for development)
      - USE_MOCK_DATA=true
      
      # Database URLs (uncomment for production)
      # - DATABASE_URL=postgresql://postgres:agripassword@postgres:5432/agridb
      # - MONGODB_URI=mongodb://mongo:27017/agridb
      # - REDIS_URL=redis://redis:6379
      
      # Authentication (mock values for development)
      - JWT_SECRET_KEY=mock_jwt_secret_key_for_development_only
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_HOURS=24
      
      # Power BI (mock values for development)
      - POWERBI_CLIENT_ID=mock_client_id
      - POWERBI_CLIENT_SECRET=mock_client_secret
      - POWERBI_TENANT_ID=mock_tenant_id
      - POWERBI_WORKSPACE_ID=mock_workspace_id
      
      # External APIs (mock values for development)
      - WEATHER_API_KEY=mock_weather_api_key
      - SATELLITE_API_KEY=mock_satellite_api_key
      
    # depends_on:
    #   - postgres
    #   - mongo
    #   - redis
    volumes:
      - ./backend:/app
    command: uvicorn app:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - agri-network

  # PostgreSQL Database (commented for static MVP)
  # Uncomment these services when ready for production integration
  
  # postgres:
  #   image: postgres:15-alpine
  #   environment:
  #     POSTGRES_DB: agridb
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: agripassword
  #     POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
  #   networks:
  #     - agri-network
  #   restart: unless-stopped

  # MongoDB Database (commented for static MVP)
  # mongo:
  #   image: mongo:7.0
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: admin
  #     MONGO_INITDB_ROOT_PASSWORD: agripassword
  #     MONGO_INITDB_DATABASE: agridb
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongo_data:/data/db
  #     - ./backend/mongo/init.js:/docker-entrypoint-initdb.d/init.js
  #   networks:
  #     - agri-network
  #   restart: unless-stopped

  # Redis Cache (commented for static MVP)
  # redis:
  #   image: redis:7.2-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - agri-network
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes

  # Nginx Reverse Proxy (optional for production)
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - agri-network
  #   restart: unless-stopped

networks:
  agri-network:
    driver: bridge

# Volumes for data persistence (uncomment when using databases)
volumes:
  postgres_data:
  mongo_data:
  redis_data: